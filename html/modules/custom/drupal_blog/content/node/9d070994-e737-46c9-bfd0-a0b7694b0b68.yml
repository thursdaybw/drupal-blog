_meta:
  bundle: article
  default_langcode: en
  entity_type: node
  uuid: 9d070994-e737-46c9-bfd0-a0b7694b0b68
  version: '1.0'
default:
  body:
  - format: markdown
    summary: ''
    value: "In phase 5 we performed the first two steps of Basiq's \"Quick\" Guide:\
      \ \n\n**Have an API key:** We have an API key for the Demo Application\n\n**Authenticate:**\
      \ Trade your new API key for an access token. The response will contain an access\
      \ token which will allow you to make secure calls to the Basiq API. They expire\
      \ every 60 minutes so it's recommended to store it globally and refresh 2-3\
      \ times an hour. For this quick start, the scope used is 'serveraccess'.\n\n\
      Now we're ready to move on with \"Create a user\".\n\n3. **Create a user**:\
      \ Creating a user gives you a bucket to store all your financial data. Upon\
      \ successful creation of a user, you will receive a user ID. With that and the\
      \ access token you created earlier, you have everything you need to start creating\
      \ and fetching financial data.\n\nIn this phase of the BasiqVoyager project,\
      \ we successfully integrated the Basiq API into our PHP application to create\
      \ a user. This process involved understanding the Basiq API's user creation\
      \ process, writing a PHP script to send a POST request to the API, and debugging\
      \ the script to ensure it worked correctly. \n\n## Understanding the Basiq API's\
      \ User Creation Process\n\nThe first step was to understand the Basiq API's\
      \ user creation process. According to the Basiq API documentation, creating\
      \ a user involves sending a POST request to the `/users` endpoint with the user's\
      \ email and mobile number in the request body. The API then returns a response\
      \ indicating whether the user was successfully created or if there were any\
      \ errors.\n\nHere's a sample code snippet for creating a user:\n\n```bash\n\
      curl --location --request POST 'https://au-api.basiq.io/users' \\\n  --header\
      \ 'Authorization: Bearer $YOUR_ACCESS_TOKEN' \\\n  --header 'Accept: application/json'\
      \ \\\n  --header 'Content-Type: application/json' \\\n  --data-raw '{\n    \"\
      email\": \"max@hooli.com\",\n    \"mobile\": \"+614xxxxxxxx\"\n  }'\n\n## Writing\
      \ the PHP Script\n\nWith this understanding, we wrote a PHP script to send a\
      \ POST request to the Basiq API. The script included the necessary cURL options\
      \ to send a POST request to the `/users` endpoint, and it used the `json_encode`\
      \ function to format the user data as a JSON object for the request body.\n\n\
      Here's the initial version of the script:\n\n```php\n// Data to be sent as part\
      \ of the request\n$data = [\n    'email' => 'fred.jackson+somewhere-devel@gmail.com',\n\
      \    'mobile' => '0612456897',\n];\n\n// ...\n\n$jsonData = json_encode($data);\n\
      \ncurl_setopt($ch, CURLOPT_POSTFIELDS, $jsonData);\ncurl_setopt($ch, CURLOPT_HTTPHEADER,\
      \ [\n    // Use the token for authorization\n    'Authorization: Bearer ' .\
      \ $token,\n    'Content-Type: application/json', // Change this to application/json\n\
      \    'basiq-version: 2.0',\n]);\n```\n\n## Debugging the PHP Script\n\nAfter\
      \ writing the script, we tested it by running it and checking the response from\
      \ the API. This is where we encountered several bugs that we had to debug.\n\
      \n### Debugging the Authorization Token Error\n\nThe first bug was an \"Invalid\
      \ authorization token\" error. This error occurred because the script was not\
      \ correctly reading the token from `token.txt` and including it in the API requests.\
      \ \n\nTo fix this bug, we modified the script to read the token from `token.txt`\
      \ and include it in the `Authorization` header of the API requests:\n\n```php\n\
      // Read the token from token.txt\n$token = trim(file_get_contents(\"{$currentDirectory}/token.txt\"\
      ));\n\n// ...\n\ncurl_setopt($ch, CURLOPT_HTTPHEADER, [\n    // Use the token\
      \ for authorization\n    'Authorization: Bearer ' . $token,\n    'Content-Type:\
      \ application/json', // Change this to application/json\n    'basiq-version:\
      \ 2.0',\n]);\n```\n\n### Debugging the Request Content Format Error\n\nThe next\
      \ bug was an \"Invalid request content\" error. This error occurred because\
      \ the script was using the `http_build_query` function to format the user data\
      \ for the cURL request, which resulted in a URL-encoded string instead of a\
      \ JSON object.\n\nTo fix this bug, we removed the `http_build_query` function\
      \ and used the `json_encode` function to format the user data as a JSON object:\n\
      \n```php\n$jsonData = json_encode($data);\n\ncurl_setopt($ch, CURLOPT_POSTFIELDS,\
      \ $jsonData);\n```\n\n### Debugging the Mobile Number Format Error\n\nThe final\
      \ bug was a \"Provided mobile is in bad format\" error. This error occurred\
      \ because the mobile number was not in the international format that the Basiq\
      \ API expects.\n\nTo fix this bug, we modified the script to format the mobile\
      \ number in the international format:\n\n```php\n// Data to be sent as part\
      \ of the request\n$data = [\n    'email' => 'fred.jackson+somewhere-devel@gmail.com',\n\
      \    'mobile' => '+61400111222', // Example mobile number in the correct format\n\
      ];\n\n// ...\n```\n\n## Conclusion\n\nAfter debugging these issues, we tested\
      \ the script again and it worked correctly, creating a user in the application\
      \ via the Basiq API. This phase of the project was a great exercise in API integration\
      \ and debugging, and it brought us one step closer to completing the BasiqVoyager\
      \ project. In the next phase, we'll continue to build on this foundation and\
      \ further enhance the application's functionality.\n>>>>>>> Stashed changes"
  comment:
  - cid: 0
    comment_count: 0
    last_comment_name: ''
    last_comment_timestamp: 1693811801
    last_comment_uid: 1
    status: 2
  created:
  - value: 1693811782
  path:
  - alias: ''
    langcode: en
  promote:
  - value: true
  revision_translation_affected:
  - value: true
  revision_uid:
  - target_id: 1
  status:
  - value: true
  sticky:
  - value: false
  title:
  - value: 'Status: BasiqVoyager - Phase 6 - Creating a User in Your Application via
      the PHP API'
  uid:
  - target_id: 1
