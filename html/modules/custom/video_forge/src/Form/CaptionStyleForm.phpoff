<?php

declare(strict_types=1);

namespace Drupal\video_forge\Form;

use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Form\FormStateInterface;

/**
 * Caption Style configuration form.
 */
final class CaptionStyleForm extends EntityForm {

  /**
   * {@inheritdoc}
   */
  public function getFormId(): string {
    return 'video_forge_caption_style_form';
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state): array {
    /** @var \Drupal\video_forge\Entity\CaptionStyle $entity */
    $entity = $this->entity;

    // Add the label field for the configuration entity.
    $form['label'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Label'),
      '#maxlength' => 255,
      '#default_value' => $entity->label(),
      '#required' => TRUE,
    ];

    // Add the machine name field for the configuration entity.
    $form['id'] = [
      '#type' => 'machine_name',
      '#default_value' => $entity->id(),
      '#machine_name' => [
        'exists' => ['\Drupal\video_forge\Entity\CaptionStyle', 'load'],
      ],
      '#disabled' => !$entity->isNew(),
    ];

    // Add description field.
    $form['description'] = [
      '#type' => 'textarea',
      '#title' => $this->t('Description'),
      '#default_value' => $entity->get('description'),
    ];

    // Add the style type field with AJAX for dynamic fields.
    $form['type'] = [
      '#type' => 'select',
      '#title' => $this->t('Style Type'),
      '#options' => [
        'sequence' => $this->t('Sequence'),
        'karaoke' => $this->t('Karaoke'),
        'plain' => $this->t('Plain'),
      ],
      '#default_value' => $entity->get('type'),
      '#required' => TRUE,
      '#ajax' => [
        'callback' => '::updateDynamicFields',
        'wrapper' => 'dynamic-fields-wrapper',
      ],
    ];

    // Add common fields shared across caption styles.
    $form['fontName'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Font Name'),
      '#default_value' => $entity->get('fontName'),
      '#required' => TRUE,
    ];

    $form['fontSize'] = [
      '#type' => 'number',
      '#title' => $this->t('Font Size'),
      '#default_value' => $entity->get('fontSize'),
      '#min' => 10,
      '#max' => 100,
    ];

    // Dynamic fields container.
    $form['dynamic_fields'] = [
      '#type' => 'container',
      '#attributes' => ['id' => 'dynamic-fields-wrapper'],
    ];

    // Populate dynamic fields based on the selected type.
    $type = $form_state->getValue('type', $entity->get('type'));
    if ($type === 'sequence') {
	    $form['dynamic_fields']['sequence_settings'] = [
		    '#type' => 'fieldset',
		    '#title' => $this->t('Sequence Settings'),

		    'fontName' => [
			    '#type' => 'textfield',
			    '#title' => $this->t('Font Name'),
			    '#default_value' => $entity->get('fontName'),
			    '#required' => TRUE,
		    ],

		    'fontSize' => [
			    '#type' => 'number',
			    '#title' => $this->t('Font Size'),
			    '#default_value' => $entity->get('fontSize'),
			    '#min' => 10,
			    '#max' => 100,
		    ],

		    // Highlight Colour.
		    'highlight_colour' => [
			    '#type' => 'textfield',
			    '#title' => $this->t('Highlight Colour'),
			    '#default_value' => $entity->get('highlight_colour') ?? '&H00FFFF00',
			    '#description' => $this->t('Colour used to highlight the active word in the sequence.'),
		    ],

		    // Highlight Scale.
		    'highlight_scale' => [
			    '#type' => 'number',
			    '#title' => $this->t('Highlight Scale'),
			    '#default_value' => $entity->get('highlight_scale') ?? 150,
			    '#min' => 50,
			    '#max' => 300,
			    '#description' => $this->t('Scaling factor applied to highlighted words (percentage).'),
		    ],

		    // Highlight Position.
		    'highlight_position' => [
			    '#type' => 'number',
			    '#title' => $this->t('Highlight Position'),
			    '#default_value' => $entity->get('highlight_position') ?? 0,
			    '#description' => $this->t('Position adjustment for the highlighted words. Positive values move up, negative values move down.'),
		    ],

		    // Sequence Timing.
		    'sequence_timing' => [
			    '#type' => 'textfield',
			    '#title' => $this->t('Sequence Timing'),
			    '#default_value' => $entity->get('sequence_timing') ?? '0.5',
			    '#description' => $this->t('Timing interval for each word in the sequence, in seconds.'),
		    ],

		    // Sequence Offset.
		    'sequence_offset' => [
			    '#type' => 'number',
			    '#title' => $this->t('Sequence Offset'),
			    '#default_value' => $entity->get('sequence_offset') ?? 0,
			    '#step' => 0.1,
			    '#description' => $this->t('Time offset for the start of the sequence, in seconds.'),
		    ],
	    ];

    }

    return $form;
  }

  /**
   * AJAX callback to update dynamic fields based on the selected type.
   */
  public function updateDynamicFields(array &$form, FormStateInterface $form_state): array {
    return $form['dynamic_fields'];
  }

  /**
   * {@inheritdoc}
   */
  public function save(array $form, FormStateInterface $form_state): int {
    /** @var \Drupal\video_forge\Entity\CaptionStyle $entity */
    $entity = $this->entity;

    // Save entity fields.
    $entity->set('label', $form_state->getValue('label'));
    $entity->set('id', $form_state->getValue('id'));
    $entity->set('description', $form_state->getValue('description'));
    $entity->set('type', $form_state->getValue('type'));
    $entity->set('fontName', $form_state->getValue('fontName'));
    $entity->set('fontSize', $form_state->getValue('fontSize'));
    $entity->set('highlight_colour', $form_state->getValue(['dynamic_fields', 'sequence_settings', 'highlight_colour']));
    $entity->set('highlight_scale', $form_state->getValue(['dynamic_fields', 'sequence_settings', 'highlight_scale']));
    $entity->set('highlight_position', $form_state->getValue(['dynamic_fields', 'sequence_settings', 'highlight_position']));
    $entity->set('sequence_timing', $form_state->getValue(['dynamic_fields', 'sequence_settings', 'sequence_timing']));
    $entity->set('sequence_offset', $form_state->getValue(['dynamic_fields', 'sequence_settings', 'sequence_offset']));


    // Save dynamic fields if applicable.
    $type = $form_state->getValue('type');
    if ($type === 'sequence') {
      $entity->set('highlight_colour', $form_state->getValue(['dynamic_fields', 'sequence_settings', 'highlight_colour']));
    }

    $result = $entity->save();

    // Show a success message.
    $this->messenger()->addStatus(
      $this->t('Caption style %label has been saved.', ['%label' => $entity->label()])
    );

    $form_state->setRedirectUrl($entity->toUrl('collection'));
    return $result;
  }
}

