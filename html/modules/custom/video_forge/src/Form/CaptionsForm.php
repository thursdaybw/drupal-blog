<?php

declare(strict_types=1);

namespace Drupal\video_forge\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Extension\ModuleHandlerInterface;
use Drupal\Core\File\FileUrlGeneratorInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;


/**
 * Provides a Fancy captions form.
 */
final class CaptionsForm extends FormBase {

  /**
   * The file URL generator service.
   *
   * @var \Drupal\Core\File\FileUrlGeneratorInterface
   */
  protected $fileUrlGenerator;

  /**
   * Constructs a new CaptionsForm.
   *
   * @param \Drupal\Core\File\FileUrlGeneratorInterface $file_url_generator
   *   The file URL generator service.
   */
  public function __construct(FileUrlGeneratorInterface $file_url_generator) {
    $this->fileUrlGenerator = $file_url_generator;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container) {
    return new static(
      $container->get('file_url_generator')
    );
  }

  /**
   * {@inheritdoc}
   */
  public function getFormId(): string {
    return 'video_forge_captions';
  }

  public function buildForm(array $form, FormStateInterface $form_state) {
	  $form['video'] = [
		  '#type' => 'managed_file',
		  '#title' => $this->t('Upload Video'),
		  '#description' => $this->t('Upload the video file to generate captions. Supported formats: MP4, MOV, AVI.'),
		  '#upload_location' => 'public://videos/',
		  '#upload_validators' => [
			  'file_validate_extensions' => ['mp4 mov avi'],
		  ],
		  '#required' => TRUE,
	  ];
	  $form['submit'] = [
		  '#type' => 'submit',
		  '#value' => $this->t('Generate Captions'),
	  ];

	  return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function validateForm(array &$form, FormStateInterface $form_state): void {
	  // @todo Validate the form here.
	  // Example:
	  // @code
	  //   if (mb_strlen($form_state->getValue('message')) < 10) {
	  //     $form_state->setErrorByName(
	  //       'message',
	  //       $this->t('Message should be at least 10 characters.'),
	  //     );
	  //   }
	  // @endcode
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state): void {
	  $fid = $form_state->getValue('video')[0]; // File ID from managed file
	  $file = \Drupal::entityTypeManager()->getStorage('file')->load($fid);

	  if ($file) {
		  // Mark the file as permanent (so itâ€™s not deleted by cron)
		  $file->setPermanent();
		  $file->save();

		  // Get the file URI and prepare it for processing
		  $file_uri = $file->getFileUri();
		  $file_path = \Drupal::service('file_system')->realpath($file_uri);

		  \Drupal::messenger()->addMessage($this->t('File uploaded: @path', ['@path' => $file_path]));

		  // Pass the file path to the Whisper and FFmpeg processing logic
		  $this->processVideo($file_path);
	  }
  }

  /**
   * Process the video file with Whisper and FFmpeg.
   */
  private function processVideo(string $file_path): void {
	  $output_dir = dirname($file_path); // Use the same directory for output
	  $command = "/home/bevan/.local/bin/whisper --model medium -f json \"$file_path\" --output_dir \"$output_dir\" --word_timestamps True";

	  // Capture output and return code
	  $output = [];
	  $return_var = 0;
	  exec($command, $output, $return_var);

	  // Log the command and its output
	  \Drupal::logger('video_forge')->info('Command: @command', ['@command' => $command]);
	  \Drupal::logger('video_forge')->info('Output: @output', ['@output' => implode("\n", $output)]);
	  \Drupal::logger('video_forge')->info('Return code: @code', ['@code' => $return_var]);

	  if ($return_var !== 0) {
		  \Drupal::messenger()->addError($this->t('Whisper failed to process the video.'));
		  return;
	  }

	  // Locate the JSON file generated by Whisper
	  $json_file = str_replace('.mp4', '.json', $file_path);

	  if (!file_exists($json_file)) {
		  \Drupal::messenger()->addError($this->t('Whisper JSON file not found.'));
		  return;
	  }
	  else {
		  $this->saveManagedFile($json_file, 'Generated JSON File');
	  }

	  // Run your PHP script to generate ASS captions
	  $ass_file = str_replace('.mp4', '.ass', $file_path);
	  // Get the module's path dynamically
	  $module_path = \Drupal::service('module_handler')->getModule('video_forge')->getPath();
	  $php_script = DRUPAL_ROOT . '/' . $module_path . '/captions.php';


	  $command = "php \"$php_script\" \"$json_file\" \"$ass_file\"";
	  exec($command, $output, $return_var);

	  if ($return_var !== 0) {
		  \Drupal::messenger()->addError($this->t('Failed to generate ASS captions.'));
		  return;
	  }
	  else {
		  $this->saveManagedFile($ass_file, 'Generated ASS File');
	  }

	  // Use FFmpeg to render captions into the video
	  $output_video = str_replace('.mp4', '_with_captions.mp4', $file_path);
	  $ass_file = str_replace('.mp4', '.ass', $file_path);

	  $command = "ffmpeg -i \"$file_path\" -vf subtitles=\"$ass_file\" -c:a copy \"$output_video\"";
	  exec($command, $output, $return_var);

	  // Log the command and its output
	  \Drupal::logger('video_forge')->info('Command: @command', ['@command' => $command]);
	  \Drupal::logger('video_forge')->info('Output: @output', ['@output' => implode("\n", $output)]);
	  \Drupal::logger('video_forge')->info('Return code: @code', ['@code' => $return_var]);

	  if ($return_var !== 0) {
		  \Drupal::messenger()->addError($this->t('Failed to render captions into the video.'));
		  return;
	  }
	  else {
		  $this->saveManagedFile($output_video, 'Video with Captions');
	  }

	  // Generate a public URL for the processed video
	  // Load the managed File entities by their URIs.
	  $json_file_entity = \Drupal::entityTypeManager()->getStorage('file')->loadByProperties(['uri' => 'public://videos/' . basename($json_file)]);
	  $ass_file_entity = \Drupal::entityTypeManager()->getStorage('file')->loadByProperties(['uri' => 'public://videos/' . basename($ass_file)]);
	  $output_video_entity = \Drupal::entityTypeManager()->getStorage('file')->loadByProperties(['uri' => 'public://videos/' . basename($output_video)]);

	  // Extract the first result since loadByProperties returns an array.
	  $json_file_entity = reset($json_file_entity);
	  $ass_file_entity = reset($ass_file_entity);
	  $output_video_entity = reset($output_video_entity);

	  // Generate URLs from the managed File entities.
	  $json_file_url = $json_file_entity ? $this->fileUrlGenerator->generateAbsoluteString($json_file_entity->getFileUri()) : NULL;
	  $ass_file_url = $ass_file_entity ? $this->fileUrlGenerator->generateAbsoluteString($ass_file_entity->getFileUri()) : NULL;
	  $output_video_url = $output_video_entity ? $this->fileUrlGenerator->generateAbsoluteString($output_video_entity->getFileUri()) : NULL;
	  $this->t('Download your video with captions: <a href=":url" target="_blank">:url</a>', [
		  ':url' => $output_video_url,
	  ]);

	  \Drupal::messenger()->addMessage(
		  $this->t('Artifacts generated: <ul><li><a href=":json_url" target="_blank">JSON</a></li><li><a href=":ass_url" target="_blank">ASS</a></li><li><a href=":mp4_url" target="_blank">Video with Captions</a></li></ul>', [
			  ':json_url' => $json_file_url,
			  ':ass_url' => $ass_file_url,
			  ':mp4_url' => $output_video_url,
		  ]));

	  \Drupal::messenger()->addMessage($this->t('Whisper successfully processed the video.'));
  }

  /**
   * Save a file as a managed file in Drupal.
   *
   * @param string $file_path
   *   The real path to the file.
   * @param string $description
   *   A description for the managed file.
   */
  private function saveManagedFile(string $file_path, string $description): void {
	  $file_uri = 'public://videos/' . basename($file_path);

	  // Copy the file to the managed file location (if not already there).
	  if (!file_exists($file_uri)) {
		  \Drupal::service('file_system')->copy($file_path, $file_uri, \Drupal\Core\File\FileSystemInterface::EXISTS_REPLACE);
	  }

	  // Create the File entity.
	  $file = \Drupal\file\Entity\File::create([
		  'uri' => $file_uri,
		  'status' => 1, // Permanent file.
		  'uid' => \Drupal::currentUser()->id(),
	  ]);

	  $file->save();
  }

}
