<?php

use Drupal\Core\Extension\ExtensionPathResolverInterface;

/**
 * Implements hook_cron().
 */
function video_forge_cron() {
  $queues = [
    'video_forge_caption_generation' => 'video_forge_caption_generation',
    'video_forge_caption_rendering' => 'video_forge_caption_rendering',
  ];

  foreach ($queues as $queue_name => $worker_id) {
    $queue = \Drupal::service('queue')->get($queue_name);
    $queue_worker = \Drupal::service('plugin.manager.queue_worker')->createInstance($worker_id);

    $limit = 10;
    for ($i = 0; $i < $limit; $i++) {
      if ($item = $queue->claimItem()) {
        try {
          $queue_worker->processItem($item->data);
          $queue->deleteItem($item);
        }
        catch (\Exception $e) {
          \Drupal::logger('video_forge')->error('Error processing queue item in @worker: @message', [
            '@worker' => $worker_id,
            '@message' => $e->getMessage(),
          ]);
          $queue->releaseItem($item);
        }
      }
      else {
        break;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for file_video template.
 */
function video_forge_preprocess_file_video(array &$variables) {
  $variables['#attached']['library'][] = 'video_forge/video_player';
  $variables['#attached']['library'][] = 'video_forge/subtitles_renderer';

  // Check if we can extract the file entity from the `files` key.
  if (!empty($variables['files']) && is_array($variables['files'])) {
    // Assume the first file is the target, as typically, there's only one video file.
    $file_data = reset($variables['files']);

    if (isset($file_data['file']) && $file_data['file'] instanceof \Drupal\file\FileInterface) {
      $file = $file_data['file'];

      // Find the media entity referencing this file.
      $media_storage = \Drupal::entityTypeManager()->getStorage('media');
      $media_query = $media_storage->getQuery()
        ->condition('field_media_video_file.target_id', $file->id())
        ->accessCheck(FALSE)
        ->range(0, 1);
      $media_ids = $media_query->execute();

      if (!empty($media_ids)) {
        $media = $media_storage->load(reset($media_ids));
        if ($media) {
          // Assuming the media entity has a field for the subtitle file (e.g., 'field_subtitle_file').
          if ($media->hasField('field_subtitle_file_ass') && !$media->get('field_subtitle_file_ass')->isEmpty()) {
            \Drupal::logger('video_forge')->notice('Found non-empty subtitle field');
            // Get the subtitle file entity.
            $subtitle_file = $media->get('field_subtitle_file_ass')->entity;
            if ($subtitle_file instanceof \Drupal\file\FileInterface) {
              // Generate the URL for the subtitle file.
	      $subtitle_url = \Drupal::service('file_url_generator')->generateAbsoluteString($subtitle_file->getFileUri());

              // Pass the subtitle file URL through drupalSettings.
              $variables['#attached']['drupalSettings']['videoForge']['subtitlesUrl'] = $subtitle_url;
            }
          }
	  else {
            \Drupal::logger('video_forge')->notice('Non non-empty subtitels found');
	  }
        }
      }
    }
  }

  // Fallback: If no subtitle file was found, pass a default or empty value.
  if (empty($variables['#attached']['drupalSettings']['videoForge']['subtitlesUrl'])) {
    $variables['#attached']['drupalSettings']['videoForge']['subtitlesUrl'] = '';
  }
}

/**
 * Implements hook_preprocess_HOOK() for media entities.
 */
function video_forge_preprocess_media(array &$variables) {
  $media = $variables['media'];

  if ($media->bundle() === 'forge_video') {
    $generate_captions_url = \Drupal\Core\Url::fromRoute('media.forge.generate_captions', [
      'media' => $media->id(),
    ])->toString();

    $links = [
      '#theme' => 'item_list',
      '#items' => [
        [
          'data' => [
            '#type' => 'link',
            '#title' => t('Generate Captions'),
            '#url' => \Drupal\Core\Url::fromRoute('media.forge.generate_captions', [
              'media' => $media->id(),
            ]),
          ],
        ],
      ],
    ];

    // Check if the media has a subtitle file to display "Render Captions".
    if (!$media->get('field_subtitle_file_ass')->isEmpty()) {
      $links['#items'][] = [
        'data' => [
          '#type' => 'link',
          '#title' => t('Render Captions'),
          '#url' => \Drupal\Core\Url::fromRoute('media.forge.render_captions', [
            'media' => $media->id(),
          ]),
        ],
      ];
    }

    // Add the links to the content variable for output.
    $variables['content']['video_forge_links'] = [
      '#type' => 'container',
      '#attributes' => ['class' => ['video-forge-links']],
      'links' => $links,
    ];
  }
}



